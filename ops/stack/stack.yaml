AWSTemplateFormatVersion: '2010-09-09'
Description: Data Engineering Pipeline Stack

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - staging
      - production
    Default: staging

Mappings:
  Environments:
    staging:
      DailyAPILambdaSchedule: cron(0 17 ? * * *)
      DailyGlueCrawlerSchedule: cron(0 17 ? * * *)
    production:
      DailyAPILambdaSchedule: cron(0 15 ? * * *)
      DailyGlueCrawlerSchedule: cron(10 15 ? * * *)

Conditions:
  IsProduction: !Equals [ !Ref Environment, production ]

Resources:
  APIS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'data-pipeline-s3-bucket-${Environment}'
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref Environment

  APIGlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      DatabaseInput:
        Description: !Sub '${Environment} Database for API data'
        LocationUri: !Sub 's3://${APIS3Bucket}/'
        Name: !Sub 'api_data_${Environment}'
      CatalogId: !Ref AWS::AccountId

  APICrawler:
    Type: AWS::Glue::Crawler
    Properties:
      DatabaseName: !Ref APIGlueDatabase
      Description: Glue Crawler for API data
      Name: !Sub 'api-data-glue-crawler-${Environment}'
      Role: !Ref APICrawlerRole
      Schedule:
        ScheduleExpression: !FindInMap [Environments, !Ref Environment, DailyGlueCrawlerSchedule]
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: DELETE_FROM_DATABASE
      Targets:
        S3Targets:
          - Path: !Sub 's3://${APIS3Bucket}/data/vaccinations'
      Configuration: "{\"Version\":1.0,\"CrawlerOutput\":{\"Partitions\":{\"AddOrUpdateBehavior\":\"InheritFromTable\"}}}"
      Tags:
        Stack: !Ref AWS::StackName
        Environment: !Ref Environment

  APICrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Delete*
                  - s3:Get*
                  - s3:Put*
                Resource:
                  - !Sub '${APIS3Bucket.Arn}'
                  - !Sub '${APIS3Bucket.Arn}/*'

  RedshiftCluster:
    Type: AWS::Redshift::Cluster
    Properties:
      ClusterIdentifier: !Sub 'data-pipeline-redshift-cluster-${Environment}'
      ClusterType: single-node
      DBName: dev
      NodeType: dc2.large
      IamRoles:
        - !GetAtt RedshiftClusterRole.Arn
      MasterUsername: appadmin
      MasterUserPassword: '{{resolve:secretsmanager:data-pipeline-redshift-cluster:SecretString:appadmin}}'

  RedshiftClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: redshift.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                Resource:
                  - !Sub '${APIS3Bucket.Arn}'
                  - !Sub '${APIS3Bucket.Arn}/*'
  APILambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/api_lambda:latest'
      ImageConfig:
        Command:
          - handler.handler
      Description: Lambda for covid api calls
      Timeout: 300
      PackageType: Image
      Role: !GetAtt APILambdaRole.Arn
      Environment:
        Variables:
          API_URL: 'https://api.corona-zahlen.org/germany'
          BUCKET: !Sub 's3://${APIS3Bucket}/data'
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref Environment

  APILambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource:
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/api_lambda'
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub '${APIS3Bucket.Arn}'
                  - !Sub '${APIS3Bucket.Arn}/*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  APILambdaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'Alarm if an error occurs in APILambda (${Environment})'
      Namespace: 'AWS/Lambda'
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref APILambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: ignore
      Threshold: 1
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic.TopicName}'
      OKActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic.TopicName}"

  LambdaDailyTrigger:
    Type: AWS::Events::Rule
    Condition: IsProduction
    Properties:
      Description: Trigger APILambda function
      Name: !Sub 'api-lambda-trigger-${Environment}'
      ScheduleExpression: !FindInMap [Environments, !Ref Environment, DailyAPILambdaSchedule]
      Targets:
        - Arn: !GetAtt APILambda.Arn
          Id: !Sub 'APILambda-${Environment}'

  LambdaDailyTriggerPermission:
    Type: AWS::Lambda::Permission
    Condition: IsProduction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt APILambda.Arn
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt LambdaDailyTrigger.Arn

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'PipelineAlarm'
      TopicName: 'PipelineAlarm'

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: 'koerber.moritz@gmail.com'
      Protocol: email
      TopicArn: !Ref SNSTopic
      DeliveryPolicy:
        healthyRetryPolicy:
          minDelayTarget: 20
          maxDelayTarget: 20
          numRetries: 3
          numMaxDelayRetries: 0
          numNoDelayRetries: 0
          numMinDelayRetries: 0
          backoffFunction: linear

  SNSExecutionPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SNSTopic
      PolicyDocument:
            Version: '2012-10-17'
            Id: Default policy
            Statement:
              - Sid: Access
                Effect: Allow
                Principal:
                  AWS: "*"
                Action:
                  - sns:GetTopicAttributes
                  - sns:SetTopicAttributes
                  - sns:AddPermission
                  - sns:RemovePermission
                  - sns:DeleteTopic
                  - sns:Subscribe
                  - sns:ListSubscriptionsByTopic
                  - sns:Publish
                  - sns:Receive
                Resource: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic.TopicName}'
                Condition:
                  StringEquals:
                    AWS:SourceOwner: !Sub '${AWS::AccountId}'
