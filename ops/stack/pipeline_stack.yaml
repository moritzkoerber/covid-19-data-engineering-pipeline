AWSTemplateFormatVersion: '2010-09-09'
Description: Data Engineering Pipeline Stack

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - staging
      - production
    Default: staging
  Version:
    Type: String

Mappings:
  Environments:
    staging:
      DailyAPILambdaSchedule: cron(0 7 ? * * *)
    production:
      DailyAPILambdaSchedule: cron(0 8 ? * * *)

Conditions:
  IsProduction: !Equals [ !Ref Environment, production ]

Resources:
  APIS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub 'data-pipeline-s3-bucket-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      AccessControl: Private
      NotificationConfiguration:
        LambdaConfigurations:
            - Event: 's3:ObjectCreated:*'
              Function: !GetAtt GELambda.Arn
              Filter:
                S3Key:
                  Rules:
                    - Name: prefix
                      Value: data/vaccinations/raw/
      Tags:
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: ApiPipeline

  APIS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref APIS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource:
              - !Sub '${APIS3Bucket.Arn}'
          - Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action:
              - s3:PutObject
            Resource:
              - !Sub '${APIS3Bucket.Arn}/logs/cloudtrail/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

  APIGlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      DatabaseInput:
        Description: !Sub '${Environment} Database for API data'
        LocationUri: !Sub 's3://${APIS3Bucket}/'
        Name: !Sub 'api_data_${Environment}'
      CatalogId: !Ref AWS::AccountId

  APIDataCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      DatabaseName: !Ref APIGlueDatabase
      Description: Glue Crawler for API data
      Name: !Sub 'api-data-glue-crawler-${Environment}'
      Role: !Ref APICrawlerRole
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: DELETE_FROM_DATABASE
      Targets:
        S3Targets:
          - Path: !Sub 's3://${APIS3Bucket}/data/vaccinations/processed/'
      Configuration: "{\"Version\":1.0,\"CrawlerOutput\":{\"Partitions\":{\"AddOrUpdateBehavior\":\"InheritFromTable\"}}}"
      Tags:
        Stack: !Ref AWS::StackName
        Environment: !Ref Environment

  APICrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Delete*
                  - s3:Get*
                  - s3:Put*
                Resource:
                  - !Sub '${APIS3Bucket.Arn}'
                  - !Sub '${APIS3Bucket.Arn}/*'

  # RedshiftCluster:
  #   Type: AWS::Redshift::Cluster
  #   Properties:
  #     ClusterIdentifier: !Sub 'data-pipeline-redshift-cluster-${Environment}'
  #     ClusterType: single-node
  #     DBName: dev
  #     NodeType: dc2.large
  #     IamRoles:
  #       - !GetAtt RedshiftClusterRole.Arn
  #     MasterUsername: appadmin
  #     MasterUserPassword: '{{resolve:secretsmanager:data-pipeline-redshift-cluster:SecretString:appadmin}}'

  # RedshiftClusterRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: redshift.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
  #     Path: /
  #     Policies:
  #       - PolicyName: GlueCatalogAccess
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - glue:*
  #                 - glue:CreateDatabase
  #                 - glue:GetTable
  #                 - glue:GetDatabase
  #               Resource:
  #                 - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/*'
  #                 - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:calatog/*'
  #                 - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:calatog'
  #       - PolicyName: S3Access
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - s3:*
  #               Resource:
  #                 - !Sub '${APIS3Bucket.Arn}'
  #                 - !Sub '${APIS3Bucket.Arn}/*'

  APILambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/api_lambda:${Version}'
      ImageConfig:
        Command:
          - handler.handler
      Description: Lambda for covid api calls
      Timeout: 300
      PackageType: Image
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          API_URL: 'https://api.corona-zahlen.org/germany'
          S3_BUCKET: !Sub 's3://${APIS3Bucket}/data/vaccinations/raw'
      Tags:
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: ApiPipeline

  APILambdaRepository:
    Type: AWS::ECR::Repository
    Properties:
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: True
      RepositoryName: api_lambda

  LambdasStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub 'api-data-state-machine-${Environment}'
      DefinitionString: |-
        {
          "StartAt": "APIQuery",
          "States": {
            "APIQuery": {
              "Type": "Task",
              "Resource": "${APILambda}",
              "Retry": [ {
                "ErrorEquals":  [ "Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                "IntervalSeconds": 21600,
                "MaxAttempts": 2
              } ],
              "End": true
            }
          }
        }
      DefinitionSubstitutions:
        APILambda: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:APILambda'
      RoleArn: !GetAtt StateMachineRole.Arn
      Tags:
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: ApiPipeline

  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt APILambda.Arn

  APILambdaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'Alarm if an error occurs in APILambda (${Environment})'
      Namespace: 'AWS/Lambda'
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref APILambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: ignore
      Threshold: 1
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      AlarmActions:
        - !ImportValue CloudWatchAlarmSNSTopic
      OKActions:
        - !ImportValue CloudWatchAlarmSNSTopic

  GELambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ge_lambda:${Version}'
      ImageConfig:
        Command:
          - handler.handler
      Description: Lambda to run great expectations on data
      Timeout: 600
      MemorySize: 512
      PackageType: Image
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !Sub 'data-pipeline-s3-bucket-${Environment}'
          S3_FOLDER: 'data/vaccinations'
          S3_FOLDER_SUCCESS: 'valid'
          S3_FOLDER_FAILURE: 'rejected'
          DATASOURCE: 'vaccinations'
          CHECKPOINT: 'checkpoint'
      Tags:
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: ApiPipeline

  GELambdaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'Alarm if an error occurs in GELambda (${Environment})'
      Namespace: 'AWS/Lambda'
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref GELambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: ignore
      Threshold: 1
      Statistic: Sum
      Period: 600
      EvaluationPeriods: 1
      AlarmActions:
        - !ImportValue CloudWatchAlarmSNSTopic
      OKActions:
        - !ImportValue CloudWatchAlarmSNSTopic

  GELambdaRepository:
    Type: AWS::ECR::Repository
    Properties:
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: True
      RepositoryName: ge_lambda

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource:
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/api_lambda'
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/ge_lambda'
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub 'arn:aws:s3:::data-pipeline-s3-bucket-${Environment}'
                  - !Sub 'arn:aws:s3:::data-pipeline-s3-bucket-${Environment}/*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GELambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GELambda.Arn
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn: !GetAtt APIS3Bucket.Arn

  DailyAPILambdaTrigger:
    Type: AWS::Events::Rule
    Condition: IsProduction
    Properties:
      Description: Trigger APILambda function
      Name: !Sub 'api-data-daily-lambda-trigger-${Environment}'
      ScheduleExpression: !FindInMap [Environments, !Ref Environment, DailyAPILambdaSchedule]
      Targets:
        - Arn: !GetAtt APILambda.Arn
          Id: !Sub 'APILambda-${Environment}'

  DailyAPILambdaTriggerPermission:
    Type: AWS::Lambda::Permission
    Condition: IsProduction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt APILambda.Arn
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt DailyAPILambdaTrigger.Arn

  APIGlueProcessingWorkflow:
    Type: AWS::Glue::Workflow
    Properties:
      Name: !Sub 'data-processing-glue-workflow-${Environment}'
      Tags:
        Stack: !Ref AWS::StackName
        Environment: !Ref Environment
        Name: ApiPipeline

  GlueDataProcessingJob:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: glueetl
        ScriptLocation: !Sub 's3://${APIS3Bucket}/scripts/glue/vaccinations_data_processing.py'
      GlueVersion: '3.0'
      DefaultArguments:
        '--bucket': !Ref APIS3Bucket
        '--prefix': 'data/vaccinations/valid/'
        '--write_location': 'data/vaccinations/processed/'
      NumberOfWorkers: 2
      Name: !Sub 'data-processing-glue-job-${Environment}'
      WorkerType: 'G.1X'
      MaxRetries: 0
      ExecutionProperty:
        MaxConcurrentRuns: 1
      Role: !Ref GlueDataProcessingJobRole
      Timeout: 30
      Tags:
        Stack: !Ref AWS::StackName
        Environment: !Ref Environment
        Name: ApiPipeline

  GlueDataProcessingJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListObjects
                  - s3:GetObject
                  - s3:PutObject
                  - s3:Delete*
                Resource:
                  - !Sub 'arn:aws:s3:::data-pipeline-s3-bucket-${Environment}'
                  - !Sub 'arn:aws:s3:::data-pipeline-s3-bucket-${Environment}/*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole

  GlueJobTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub 'data-processing-glue-job-trigger-${Environment}'
      WorkflowName: !Ref APIGlueProcessingWorkflow
      Description: !Sub 'Triggers ${GlueDataProcessingJob} in ${Environment}'
      Actions:
        - JobName: !Ref GlueDataProcessingJob
      Type: EVENT
      Tags:
        Stack: !Ref AWS::StackName
        Environment: !Ref Environment
        Name: ApiPipeline

  APIS3BucketCloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: !Sub 'data-pipeline-cloudtrail-${Environment}'
      IsLogging: True
      S3BucketName: !Ref APIS3Bucket
      S3KeyPrefix: 'logs/cloudtrail'
      EventSelectors:
        - DataResources:
            - Type: AWS::S3::Object
              Values:
                - !Sub 'arn:aws:s3:::${APIS3Bucket}/data/vaccinations/valid/'
          IncludeManagementEvents: False
          ReadWriteType: WriteOnly

  GlueJobEventRule:
    DependsOn: APIGlueProcessingWorkflow
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'data-pipeline-valid-data-event-${Environment}'
      Description: !Sub 'Triggers ${GlueDataProcessingJob} in ${Environment} when ${GELambda} puts a valid data file in the corresponding folder'
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - PutObject
          requestParameters:
            bucketName:
              - !Ref APIS3Bucket
            key:
              - prefix: data/vaccinations/valid/
      State: ENABLED
      Targets:
        - Arn: !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:workflow/${APIGlueProcessingWorkflow}'
          RoleArn: !GetAtt GlueJobEventRuleRole.Arn
          Id: !Sub 'CloudtrailWorkflowTrigger${Environment}'

  GlueJobEventRuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: GlueFailureNotification
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - glue:notifyEvent
                Resource:
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:workflow/${APIGlueProcessingWorkflow}'

  GlueJobEventFailureNotification:
    Type: AWS::Events::Rule
    Properties:
      Name:  !Sub 'data-processing-glue-job-failure-notification-${Environment}'
      Description: !Sub 'Notifies in case ${GlueDataProcessingJob} fails in ${Environment}'
      EventPattern:
        source:
          - aws.glue
        detail-type:
          - Glue Job State Change
        detail:
          jobName:
            - !Ref GlueDataProcessingJob
          state:
            - FAILED
            - TIMEOUT
      State: ENABLED
      Targets:
        - Arn: !ImportValue CloudWatchAlarmSNSTopic
          Id: !Sub 'GlueDataProcessingJobFailed${Environment}'

  GlueCrawlerTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub 'data-processing-glue-crawler-trigger-${Environment}'
      WorkflowName: !Ref APIGlueProcessingWorkflow
      Actions:
        - CrawlerName: !Ref APIDataCrawler
      Description: !Sub 'Triggers ${APIDataCrawler} after ${GlueDataProcessingJob} successfully ran in ${Environment}'
      Predicate:
        Conditions:
          - JobName: !Ref GlueDataProcessingJob
            State: SUCCEEDED
            LogicalOperator: EQUALS
      StartOnCreation: True
      Type: CONDITIONAL
      Tags:
        Stack: !Ref AWS::StackName
        Environment: !Ref Environment
        Name: ApiPipeline
