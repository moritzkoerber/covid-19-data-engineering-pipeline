AWSTemplateFormatVersion: '2010-09-09'
Description: Data Engineering Pipeline Stack

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - staging
      - production
    Default: staging
  Version:
    Type: String

Mappings:
  Environments:
    staging:
      DailyAPILambdaSchedule: cron(0 7 ? * * *)
      DailyGELambdaSchedule: cron(30 7 ? * * *)
      DailyGlueCrawlerSchedule: cron(45 7 ? * * *)
    production:
      DailyAPILambdaSchedule: cron(0 8 ? * * *)
      DailyGELambdaSchedule: cron(30 8 ? * * *)
      DailyGlueCrawlerSchedule: cron(45 8 ? * * *)

Conditions:
  IsProduction: !Equals [ !Ref Environment, production ]

Resources:
  APIS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub 'data-pipeline-s3-bucket-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfiguration:
          - Event: 's3:ObjectCreated:*'
            Function: !Ref GELambda
            Filter:
                S3Key: S3KeyFilter
                 Rules: 
                  - Name: Data Bucket
                    Value: /data/vaccinations/raw/
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref Environment

  APIGlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      DatabaseInput:
        Description: !Sub '${Environment} Database for API data'
        LocationUri: !Sub 's3://${APIS3Bucket}/'
        Name: !Sub 'api_data_${Environment}'
      CatalogId: !Ref AWS::AccountId

  APIDataCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      DatabaseName: !Ref APIGlueDatabase
      Description: Glue Crawler for API data
      Name: !Sub 'api-data-glue-crawler-${Environment}'
      Role: !Ref APICrawlerRole
      Schedule:
        ScheduleExpression: !FindInMap [Environments, !Ref Environment, DailyGlueCrawlerSchedule]
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: DELETE_FROM_DATABASE
      Targets:
        S3Targets:
          - Path: !Sub 's3://${APIS3Bucket}/data/vaccinations/processed'
      Configuration: "{\"Version\":1.0,\"CrawlerOutput\":{\"Partitions\":{\"AddOrUpdateBehavior\":\"InheritFromTable\"}}}"
      Tags:
        Stack: !Ref AWS::StackName
        Environment: !Ref Environment

  APICrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Delete*
                  - s3:Get*
                  - s3:Put*
                Resource:
                  - !Sub '${APIS3Bucket.Arn}'
                  - !Sub '${APIS3Bucket.Arn}/*'

  # RedshiftCluster:
  #   Type: AWS::Redshift::Cluster
  #   Properties:
  #     ClusterIdentifier: !Sub 'data-pipeline-redshift-cluster-${Environment}'
  #     ClusterType: single-node
  #     DBName: dev
  #     NodeType: dc2.large
  #     IamRoles:
  #       - !GetAtt RedshiftClusterRole.Arn
  #     MasterUsername: appadmin
  #     MasterUserPassword: '{{resolve:secretsmanager:data-pipeline-redshift-cluster:SecretString:appadmin}}'

  # RedshiftClusterRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: redshift.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
  #     Path: /
  #     Policies:
  #       - PolicyName: GlueCatalogAccess
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - glue:*
  #                 - glue:CreateDatabase
  #                 - glue:GetTable
  #                 - glue:GetDatabase
  #               Resource:
  #                 - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/*'
  #                 - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:calatog/*'
  #                 - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:calatog'
  #       - PolicyName: S3Access
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - s3:*
  #               Resource:
  #                 - !Sub '${APIS3Bucket.Arn}'
  #                 - !Sub '${APIS3Bucket.Arn}/*'

  APILambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/api_lambda:${Version}'
      ImageConfig:
        Command:
          - handler.handler
      Description: Lambda for covid api calls
      Timeout: 300
      PackageType: Image
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          API_URL: 'https://api.corona-zahlen.org/germany'
          S3_BUCKET: !Sub 's3://${APIS3Bucket}/data/vaccinations/raw'
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref Environment

  APILambdaRepository:
    Type: AWS::ECR::Repository
    Properties:
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: True
      RepositoryName: api_lambda

  APILambdaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'Alarm if an error occurs in APILambda (${Environment})'
      Namespace: 'AWS/Lambda'
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref APILambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: ignore
      Threshold: 1
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      AlarmActions:
        - !ImportValue CloudWatchAlarmSNSTopic
      OKActions:
        - !ImportValue CloudWatchAlarmSNSTopic

  GELambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ge_lambda:${Version}'
      ImageConfig:
        Command:
          - handler.handler
      Description: Lambda to run great expectations on data
      Timeout: 600
      MemorySize: 512
      PackageType: Image
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !Ref APIS3Bucket
          S3_FOLDER: 'data/vaccinations'
          DATASOURCE: 'vaccinations'
          CHECKPOINT: 'checkpoint'
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref Environment

  GELambdaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'Alarm if an error occurs in GELambda (${Environment})'
      Namespace: 'AWS/Lambda'
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref GELambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: ignore
      Threshold: 1
      Statistic: Sum
      Period: 600
      EvaluationPeriods: 1
      AlarmActions:
        - !ImportValue CloudWatchAlarmSNSTopic
      OKActions:
        - !ImportValue CloudWatchAlarmSNSTopic

  GELambdaRepository:
    Type: AWS::ECR::Repository
    Properties:
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: True
      RepositoryName: ge_lambda

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource:
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/api_lambda'
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/ge_lambda'
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub '${APIS3Bucket.Arn}'
                  - !Sub '${APIS3Bucket.Arn}/*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DailyAPILambdaTrigger:
    Type: AWS::Events::Rule
    Condition: IsProduction
    Properties:
      Description: Trigger APILambda function
      Name: !Sub 'daily-api-lambda-trigger-${Environment}'
      ScheduleExpression: !FindInMap [Environments, !Ref Environment, DailyAPILambdaSchedule]
      Targets:
        - Arn: !GetAtt APILambda.Arn
          Id: !Sub 'APILambda-${Environment}'

  DailyAPILambdaTriggerPermission:
    Type: AWS::Lambda::Permission
    Condition: IsProduction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt APILambda.Arn
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt DailyAPILambdaTrigger.Arn

  DailyGELambdaTrigger:
    Type: AWS::Events::Rule
    Condition: IsProduction
    Properties:
      Description: Trigger GELambda function
      Name: !Sub 'daily-ge-lambda-trigger-${Environment}'
      ScheduleExpression: !FindInMap [Environments, !Ref Environment, DailyGELambdaSchedule]
      Targets:
        - Arn: !GetAtt GELambda.Arn
          Id: !Sub 'GELambda-${Environment}'

  DailyGELambdaTriggerPermission:
    Type: AWS::Lambda::Permission
    Condition: IsProduction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GELambda.Arn
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt DailyGELambdaTrigger.Arn
